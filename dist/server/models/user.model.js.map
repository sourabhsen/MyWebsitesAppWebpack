{"version":3,"sources":["../../../app/models/user.model.js"],"names":["userSchema","Schema","local","username","type","String","unique","password","email","role","methods","generateHash","hashSync","genSaltSync","validPassword","compareSync","model"],"mappings":";;;;;;AASA;;;;AAGA;;;;;;AAEA;;;AAZA;;AAEA;;AAEA;;AAEA;AAOA,IAAIA,aAAa,mBAASC,MAAT,CAAgB;;AAE/BC,SAAQ;;AAENC,cAAW,EAAEC,MAAOC,MAAT,EAAiBC,QAAS,IAA1B,EAFL;;AAINC,cAAWF,MAJL;;AAMNG,WAAQ,EAAEJ,MAAOC,MAAT,EAAiBC,QAAS,IAA1B;AANF,GAFuB;;AAW/BG,QAAO,EAAEL,MAAOC,MAAT;AAXwB,CAAhB,CAAjB;;AAcA;;AAEA;;;AApBA;AAqBAL,WAAWU,OAAX,CAAmBC,YAAnB,GAAkC,UAASJ,QAAT,EAAmB;;AAEnD,SAAO,uBAAOK,QAAP,CAAgBL,QAAhB,EAA0B,uBAAOM,WAAP,CAAmB,CAAnB,CAA1B,EAAiD,IAAjD,CAAP;AACD,CAHD;;AAKA;AACAb,WAAWU,OAAX,CAAmBI,aAAnB,GAAmC,UAASP,QAAT,EAAmB;;AAEpD,SAAO,uBAAOQ,WAAP,CAAmBR,QAAnB,EAA6B,KAAKL,KAAL,CAAWK,QAAxC,CAAP;AACD,CAHD;;AAKA;kBACe,mBAASS,KAAT,CAAe,MAAf,EAAuBhB,UAAvB,C","file":"user.model.js","sourcesContent":["\r\n\r\n// */app/models/user.model.js*\r\n\r\n// ## User Model\r\n\r\n// Note: MongoDB will autogenerate an _id for each User object created\r\n\r\n// Grab the Mongoose module\r\nimport mongoose from 'mongoose';\r\n\r\n// Import library to hash passwords\r\nimport bcrypt from 'bcrypt-nodejs';\r\n\r\n// Define the schema for the showcase item\r\nlet userSchema = mongoose.Schema({\r\n\r\n  local : {\r\n\r\n    username : { type : String, unique : true },\r\n\r\n    password : String,\r\n\r\n    email : { type : String, unique : true }\r\n  },\r\n\r\n  role : { type : String }\r\n});\r\n\r\n// ## Methods\r\n\r\n// ### Generate a hash\r\nuserSchema.methods.generateHash = function(password) {\r\n\r\n  return bcrypt.hashSync(password, bcrypt.genSaltSync(8), null);\r\n};\r\n\r\n// ### Check if password is valid\r\nuserSchema.methods.validPassword = function(password) {\r\n\r\n  return bcrypt.compareSync(password, this.local.password);\r\n};\r\n\r\n// Create the model for users and expose it to the app\r\nexport default mongoose.model('User', userSchema);\r\n"]}