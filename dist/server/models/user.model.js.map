{"version":3,"sources":["../../../app/models/user.model.js"],"names":["userSchema","mongoose","Schema","local","username","type","String","unique","password","email","role","methods","generateHash","bcrypt","hashSync","genSaltSync","validPassword","compareSync","model"],"mappings":";;;;;;AASA;;;;AAGA;;;;;;AAEA;;;AAZA;;AAEA;;AAEA;;AAEA;AAOA,IAAIA,aAAaC,mBAASC,MAAT,CAAgB;;AAE/BC,SAAQ;;AAENC,cAAW,EAAEC,MAAOC,MAAT,EAAiBC,QAAS,IAA1B,EAFL;;AAINC,cAAWF,MAJL;;AAMNG,WAAQ,EAAEJ,MAAOC,MAAT,EAAiBC,QAAS,IAA1B;AANF,GAFuB;;AAW/BG,QAAO,EAAEL,MAAOC,MAAT;AAXwB,CAAhB,CAAjB;;AAcA;;AAEA;;;AApBA;AAqBAN,WAAWW,OAAX,CAAmBC,YAAnB,GAAkC,UAASJ,QAAT,EAAmB;;AAEnD,SAAOK,uBAAOC,QAAP,CAAgBN,QAAhB,EAA0BK,uBAAOE,WAAP,CAAmB,CAAnB,CAA1B,EAAiD,IAAjD,CAAP;AACD,CAHD;;AAKA;AACAf,WAAWW,OAAX,CAAmBK,aAAnB,GAAmC,UAASR,QAAT,EAAmB;;AAEpD,SAAOK,uBAAOI,WAAP,CAAmBT,QAAnB,EAA6B,KAAKL,KAAL,CAAWK,QAAxC,CAAP;AACD,CAHD;;AAKA;kBACeP,mBAASiB,KAAT,CAAe,MAAf,EAAuBlB,UAAvB,C","file":"user.model.js","sourcesContent":["\n\n// */app/models/user.model.js*\n\n// ## User Model\n\n// Note: MongoDB will autogenerate an _id for each User object created\n\n// Grab the Mongoose module\nimport mongoose from 'mongoose';\n\n// Import library to hash passwords\nimport bcrypt from 'bcrypt-nodejs';\n\n// Define the schema for the showcase item\nlet userSchema = mongoose.Schema({\n\n  local : {\n\n    username : { type : String, unique : true },\n\n    password : String,\n\n    email : { type : String, unique : true }\n  },\n\n  role : { type : String }\n});\n\n// ## Methods\n\n// ### Generate a hash\nuserSchema.methods.generateHash = function(password) {\n\n  return bcrypt.hashSync(password, bcrypt.genSaltSync(8), null);\n};\n\n// ### Check if password is valid\nuserSchema.methods.validPassword = function(password) {\n\n  return bcrypt.compareSync(password, this.local.password);\n};\n\n// Create the model for users and expose it to the app\nexport default mongoose.model('User', userSchema);\n"]}