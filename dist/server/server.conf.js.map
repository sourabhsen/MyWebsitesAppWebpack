{"version":3,"sources":["../../app/server.conf.js"],"names":["app","server","http","createServer","io","socketio","listen","port","process","env","PORT","mongoose","passport","all","req","res","next","header","NODE_ENV","use","bodyParser","json","type","urlencoded","extended","express","static","path","join","__dirname","engine","swig","renderFile","set","secret","SESSION_SECRET","resave","saveUninitialized","initialize","session","router","Router","console","log"],"mappings":";;;;;;;AAaA;;AAQA;;;;AACA;;;;AACA;;;;AAEA;;;;AAEA;;;;AAQA;;;;AAEA;;;;AAEA;;;;AAEA;;;;AAEA;;;;AACA;;;;AACA;;;;AAKA;;;;AAQA;;;;AAMA;;;;AAmEA;;;;;;AApHA;AACA;;AAEA;;AAEA;AApBA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAYA;;AAEA;;AAEA;AACA,IAAIA,MAAM,wBAAV;AACA;AACA,IAAIC,SAASC,eAAKC,YAAL,CAAkBH,GAAlB,CAAb;AACA;AACA,IAAII,KAAKC,iBAASC,MAAT,CAAgBL,MAAhB,CAAT;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;;AAKA;;AAEA;;;AAGA,oBAAKG,EAAL;;AAEA;AACA,IAAIG,OAAOC,QAAQC,GAAR,CAAYC,IAAZ,IAAoB,IAA/B;;AAEA;;;AAGA;AACA,4BAAaC,kBAAb;;AAEA;;;AAGA;AACA,4BAAaC,kBAAb;;AAEAZ,IAAIa,GAAJ,CAAQ,GAAR,EAAa,UAASC,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,EAAyB;AACpCD,MAAIE,MAAJ,CAAW,6BAAX,EAA0C,GAA1C;AACAF,MAAIE,MAAJ,CAAW,8BAAX,EAA2C,iCAA3C;AACAF,MAAIE,MAAJ,CAAW,8BAAX,EAA2C,kBAA3C;AACAD;AACA,CALF;;AAQA,IAAIR,QAAQC,GAAR,CAAYS,QAAZ,KAAyB,aAAzB,IACAV,QAAQC,GAAR,CAAYS,QAAZ,KAAyB,MAD7B;AAEE;AACAlB,MAAImB,GAAJ,CAAQ,sBAAO,KAAP,CAAR;;AAEF;AACAnB,IAAImB,GAAJ,CAAQ,6BAAR;;AAEA;;AAEA;AACAnB,IAAImB,GAAJ,CAAQC,qBAAWC,IAAX,EAAR;AACA;AACArB,IAAImB,GAAJ,CAAQC,qBAAWC,IAAX,CAAgB,EAAEC,MAAM,0BAAR,EAAhB,CAAR;AACA;AACAtB,IAAImB,GAAJ,CAAQC,qBAAWG,UAAX,CAAsB,EAAEC,UAAU,IAAZ,EAAtB,CAAR;;AAEA;AACAxB,IAAImB,GAAJ,CAAQ,8BAAe,wBAAf,CAAR;AACA;AACA;AACAnB,IAAImB,GAAJ,CAAQM,kBAAQC,MAAR,CAAeC,eAAKC,IAAL,CAAUC,SAAV,EAAqB,WAArB,CAAf,CAAR;;AAEC;AACD7B,IAAI8B,MAAJ,CAAW,MAAX,EAAmBC,eAAKC,UAAxB;;AAEAhC,IAAIiC,GAAJ,CAAQ,aAAR,EAAuB,MAAvB;AACAjC,IAAIiC,GAAJ,CAAQ,OAAR,EAAiBJ,YAAY,eAA7B;AACA7B,IAAIiC,GAAJ,CAAQ,YAAR,EAAsB,KAAtB;;AAEA;;AAEA;AACAjC,IAAImB,GAAJ,CAAQ,8BAAQ;;AAEde,UAAS1B,QAAQC,GAAR,CAAY0B,cAFP;;AAIdC,UAAS,IAJK;;AAMdC,qBAAoB;AANN,CAAR,CAAR;;AASArC,IAAImB,GAAJ,CAAQP,mBAAS0B,UAAT,EAAR;;AAEA;AACAtC,IAAImB,GAAJ,CAAQP,mBAAS2B,OAAT,EAAR;;AAEA;;AAEA;AACA,IAAIC,SAASf,kBAAQgB,MAAR,EAAb;;AAEA;AACA;;;AAGA;AACA,sBAAOzC,GAAP,EAAYwC,MAAZ,EAAoB5B,kBAApB;;AAEA;;AAEAX,OAAOK,MAAP,CAAcC,IAAd;;AAEA;AACAmC,QAAQC,GAAR,gCAAyCpC,IAAzC;;AAEA;QACQP,G,GAAAA,G","file":"server.conf.js","sourcesContent":["// *server.conf.js*\n\n//  This is the file where we will:\n//  - Configure our application\n//  - Connect to our database\n//  - Create our Mongoose models\n//  - Define routes for our RESTful API\n//  - Define routes for our frontend Angular application\n//  - Set the app to listen on a port so we can view it in our browser\n\n// # Node Env Variables\n\n// Load Node environment variable configuration file\nimport {validateEnvVariables} from './config/env.conf.js';\n\n// Set up appropriate environment variables if necessary\nvalidateEnvVariables();\n\n// # Modules\n\n// Load Express\nimport express from 'express';\nimport swig from 'swig';\nimport path from 'path';\n// Load Socket.io\nimport socketio from 'socket.io';\n// Load Node http module\nimport http from 'http';\n// Create our app with Express\nlet app = express();\n// Create a Node server for our Express app\nlet server = http.createServer(app);\n// Integrate Socket.io\nlet io = socketio.listen(server);\n// Load Mongoose for MongoDB interactions\nimport mongoose from 'mongoose';\n// Log requests to the console (Express 4)\nimport morgan from 'morgan';\n// Pull information from HTML POST (express 4)\nimport bodyParser from 'body-parser';\n// Simulate DELETE and PUT (Express 4)\nimport methodOverride from 'method-override';\n// PassportJS\nimport passport from 'passport';\nimport cookieParser from 'cookie-parser';\nimport session from 'express-session';\n\n// # Configuration\n\n// Load Socket.io server functionality\nimport base from './sockets/base.js';\n\nbase(io);\n\n// Set the port for this app\nlet port = process.env.PORT || 8080;\n\n// Load Mongoose config file for connecting to MongoDB instance\nimport mongooseConf from './config/mongoose.conf.js';\n\n// Pass Mongoose configuration Mongoose instance\nmongooseConf(mongoose);\n\n// Import PassportJS configuration\nimport passportConf from './config/passport.conf.js';\n\n// Pass Passport configuration our PassportJS instance\npassportConf(passport);\n\napp.all('/', function(req, res, next) {\n  res.header(\"Access-Control-Allow-Origin\", \"*\");\n  res.header('Access-Control-Allow-Methods', 'PUT, GET, POST, DELETE, OPTIONS');\n  res.header(\"Access-Control-Allow-Headers\", \"X-Requested-With\");\n  next();\n });\n\n\nif (process.env.NODE_ENV === 'development' ||\n    process.env.NODE_ENV === 'test')\n  // Log every request to the console\n  app.use(morgan('dev'));\n\n// Read cookies (needed for authentication)\napp.use(cookieParser());\n\n// ## Get all data/stuff of the body (POST) parameters\n\n// Parse application/json\napp.use(bodyParser.json());\n// Parse application/vnd.api+json as json\napp.use(bodyParser.json({ type: 'application/vnd.api+json' }));\n// Parse application/x-www-form-urlencoded\napp.use(bodyParser.urlencoded({ extended: true }));\n\n// Override with the X-HTTP-Method-Override header in the request. Simulate DELETE/PUT\napp.use(methodOverride('X-HTTP-Method-Override'));\n// Set the static files location /public/img will be /img for users\n//app.use(express.static(__dirname + '/dist/client'));\napp.use(express.static(path.join(__dirname, '../client'))); \n \n // Register our templating engine\napp.engine('html', swig.renderFile);\n\napp.set('view engine', 'html');\napp.set('views', __dirname + './dist/client');\napp.set('view cache', false);\n\n// ## Passport JS\n\n// Session secret\napp.use(session({\n\n  secret : process.env.SESSION_SECRET,\n\n  resave : true,\n\n  saveUninitialized : true\n}));\n\napp.use(passport.initialize());\n\n// Persistent login sessions\napp.use(passport.session());\n\n// ## Routes\n\n// Get an instance of the express Router\nlet router = express.Router();\n\n// Load our application API routes\n// Pass in our express and express router instances\nimport routes from './routes';\n\n// Pass in instances of the express app, router, and passport\nroutes(app, router, passport);\n\n// ### Ignition Phase\n\nserver.listen(port);\n\n// Shoutout to the user\nconsole.log(`Wizardry is afoot on port ${port}`);\n\n// Expose app\nexport {app};\n"]}