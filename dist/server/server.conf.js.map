{"version":3,"sources":["../../app/server.conf.js"],"names":["app","server","createServer","io","listen","port","process","env","PORT","all","req","res","next","header","NODE_ENV","use","json","type","urlencoded","extended","static","join","__dirname","engine","renderFile","set","secret","SESSION_SECRET","resave","saveUninitialized","initialize","session","router","Router","console","log"],"mappings":";;;;;;;AAaA;;AAQA;;;;AACA;;;;AACA;;;;AAEA;;;;AAEA;;;;AAQA;;;;AAEA;;;;AAEA;;;;AAEA;;;;AAEA;;;;AACA;;;;AACA;;;;AAKA;;;;AAQA;;;;AAMA;;;;AAmEA;;;;;;AApHA;AACA;;AAEA;;AAEA;AApBA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAYA;;AAEA;;AAEA;AACA,IAAIA,MAAM,wBAAV;AACA;AACA,IAAIC,SAAS,eAAKC,YAAL,CAAkBF,GAAlB,CAAb;AACA;AACA,IAAIG,KAAK,iBAASC,MAAT,CAAgBH,MAAhB,CAAT;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;;AAKA;;AAEA;;;AAGA,oBAAKE,EAAL;;AAEA;AACA,IAAIE,OAAOC,QAAQC,GAAR,CAAYC,IAAZ,IAAoB,IAA/B;;AAEA;;;AAGA;AACA;;AAEA;;;AAGA;AACA;;AAEAR,IAAIS,GAAJ,CAAQ,GAAR,EAAa,UAASC,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,EAAyB;AACpCD,MAAIE,MAAJ,CAAW,6BAAX,EAA0C,GAA1C;AACAF,MAAIE,MAAJ,CAAW,8BAAX,EAA2C,iCAA3C;AACAF,MAAIE,MAAJ,CAAW,8BAAX,EAA2C,kBAA3C;AACAD;AACA,CALF;;AAQA,IAAIN,QAAQC,GAAR,CAAYO,QAAZ,KAAyB,aAAzB,IACAR,QAAQC,GAAR,CAAYO,QAAZ,KAAyB,MAD7B;AAEE;AACAd,MAAIe,GAAJ,CAAQ,sBAAO,KAAP,CAAR;;AAEF;AACAf,IAAIe,GAAJ,CAAQ,6BAAR;;AAEA;;AAEA;AACAf,IAAIe,GAAJ,CAAQ,qBAAWC,IAAX,EAAR;AACA;AACAhB,IAAIe,GAAJ,CAAQ,qBAAWC,IAAX,CAAgB,EAAEC,MAAM,0BAAR,EAAhB,CAAR;AACA;AACAjB,IAAIe,GAAJ,CAAQ,qBAAWG,UAAX,CAAsB,EAAEC,UAAU,IAAZ,EAAtB,CAAR;;AAEA;AACAnB,IAAIe,GAAJ,CAAQ,8BAAe,wBAAf,CAAR;AACA;AACA;AACAf,IAAIe,GAAJ,CAAQ,kBAAQK,MAAR,CAAe,eAAKC,IAAL,CAAUC,SAAV,EAAqB,WAArB,CAAf,CAAR;;AAEC;AACDtB,IAAIuB,MAAJ,CAAW,MAAX,EAAmB,eAAKC,UAAxB;;AAEAxB,IAAIyB,GAAJ,CAAQ,aAAR,EAAuB,MAAvB;AACAzB,IAAIyB,GAAJ,CAAQ,OAAR,EAAiBH,YAAY,eAA7B;AACAtB,IAAIyB,GAAJ,CAAQ,YAAR,EAAsB,KAAtB;;AAEA;;AAEA;AACAzB,IAAIe,GAAJ,CAAQ,8BAAQ;;AAEdW,UAASpB,QAAQC,GAAR,CAAYoB,cAFP;;AAIdC,UAAS,IAJK;;AAMdC,qBAAoB;AANN,CAAR,CAAR;;AASA7B,IAAIe,GAAJ,CAAQ,mBAASe,UAAT,EAAR;;AAEA;AACA9B,IAAIe,GAAJ,CAAQ,mBAASgB,OAAT,EAAR;;AAEA;;AAEA;AACA,IAAIC,SAAS,kBAAQC,MAAR,EAAb;;AAEA;AACA;;;AAGA;AACA,sBAAOjC,GAAP,EAAYgC,MAAZ;;AAEA;;AAEA/B,OAAOG,MAAP,CAAcC,IAAd;;AAEA;AACA6B,QAAQC,GAAR,gCAAyC9B,IAAzC;;AAEA;QACQL,G,GAAAA,G","file":"server.conf.js","sourcesContent":["// *server.conf.js*\r\n\r\n//  This is the file where we will:\r\n//  - Configure our application\r\n//  - Connect to our database\r\n//  - Create our Mongoose models\r\n//  - Define routes for our RESTful API\r\n//  - Define routes for our frontend Angular application\r\n//  - Set the app to listen on a port so we can view it in our browser\r\n\r\n// # Node Env Variables\r\n\r\n// Load Node environment variable configuration file\r\nimport {validateEnvVariables} from './config/env.conf.js';\r\n\r\n// Set up appropriate environment variables if necessary\r\nvalidateEnvVariables();\r\n\r\n// # Modules\r\n\r\n// Load Express\r\nimport express from 'express';\r\nimport swig from 'swig';\r\nimport path from 'path';\r\n// Load Socket.io\r\nimport socketio from 'socket.io';\r\n// Load Node http module\r\nimport http from 'http';\r\n// Create our app with Express\r\nlet app = express();\r\n// Create a Node server for our Express app\r\nlet server = http.createServer(app);\r\n// Integrate Socket.io\r\nlet io = socketio.listen(server);\r\n// Load Mongoose for MongoDB interactions\r\nimport mongoose from 'mongoose';\r\n// Log requests to the console (Express 4)\r\nimport morgan from 'morgan';\r\n// Pull information from HTML POST (express 4)\r\nimport bodyParser from 'body-parser';\r\n// Simulate DELETE and PUT (Express 4)\r\nimport methodOverride from 'method-override';\r\n// PassportJS\r\nimport passport from 'passport';\r\nimport cookieParser from 'cookie-parser';\r\nimport session from 'express-session';\r\n\r\n// # Configuration\r\n\r\n// Load Socket.io server functionality\r\nimport base from './sockets/base.js';\r\n\r\nbase(io);\r\n\r\n// Set the port for this app\r\nlet port = process.env.PORT || 8080;\r\n\r\n// Load Mongoose config file for connecting to MongoDB instance\r\nimport mongooseConf from './config/mongoose.conf.js';\r\n\r\n// Pass Mongoose configuration Mongoose instance\r\nmongooseConf(mongoose);\r\n\r\n// Import PassportJS configuration\r\nimport passportConf from './config/passport.conf.js';\r\n\r\n// Pass Passport configuration our PassportJS instance\r\npassportConf(passport);\r\n\r\napp.all('/', function(req, res, next) {\r\n  res.header(\"Access-Control-Allow-Origin\", \"*\");\r\n  res.header('Access-Control-Allow-Methods', 'PUT, GET, POST, DELETE, OPTIONS');\r\n  res.header(\"Access-Control-Allow-Headers\", \"X-Requested-With\");\r\n  next();\r\n });\r\n\r\n\r\nif (process.env.NODE_ENV === 'development' ||\r\n    process.env.NODE_ENV === 'test')\r\n  // Log every request to the console\r\n  app.use(morgan('dev'));\r\n\r\n// Read cookies (needed for authentication)\r\napp.use(cookieParser());\r\n\r\n// ## Get all data/stuff of the body (POST) parameters\r\n\r\n// Parse application/json\r\napp.use(bodyParser.json());\r\n// Parse application/vnd.api+json as json\r\napp.use(bodyParser.json({ type: 'application/vnd.api+json' }));\r\n// Parse application/x-www-form-urlencoded\r\napp.use(bodyParser.urlencoded({ extended: true }));\r\n\r\n// Override with the X-HTTP-Method-Override header in the request. Simulate DELETE/PUT\r\napp.use(methodOverride('X-HTTP-Method-Override'));\r\n// Set the static files location /public/img will be /img for users\r\n//app.use(express.static(__dirname + '/dist/client'));\r\napp.use(express.static(path.join(__dirname, '../client'))); \r\n \r\n // Register our templating engine\r\napp.engine('html', swig.renderFile);\r\n\r\napp.set('view engine', 'html');\r\napp.set('views', __dirname + './dist/client');\r\napp.set('view cache', false);\r\n\r\n// ## Passport JS\r\n\r\n// Session secret\r\napp.use(session({\r\n\r\n  secret : process.env.SESSION_SECRET,\r\n\r\n  resave : true,\r\n\r\n  saveUninitialized : true\r\n}));\r\n\r\napp.use(passport.initialize());\r\n\r\n// Persistent login sessions\r\napp.use(passport.session());\r\n\r\n// ## Routes\r\n\r\n// Get an instance of the express Router\r\nlet router = express.Router();\r\n\r\n// Load our application API routes\r\n// Pass in our express and express router instances\r\nimport routes from './routes';\r\n\r\n// Pass in instances of the express app, router, and passport\r\nroutes(app, router, passport);\r\n\r\n// ### Ignition Phase\r\n\r\nserver.listen(port);\r\n\r\n// Shoutout to the user\r\nconsole.log(`Wizardry is afoot on port ${port}`);\r\n\r\n// Expose app\r\nexport {app};\r\n"]}