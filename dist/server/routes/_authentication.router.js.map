{"version":3,"sources":["../../../app/routes/_authentication.router.js"],"names":["stringify","require","https","HttpsProxyAgent","request","proxy","agent","ObjectId","Types","app","router","passport","auth","admin","get","req","res","options","url","headers","callback","error","response","body","statusCode","info","JSON","parse","linked","save","err","result","console","log","sendStatus","find","send","json","length"],"mappings":";;;;;;AAiBA;;;;AAEA;;;;;;AAlBA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AAKA,IAAIA,YAAYC,QAAQ,qBAAR,CAAhB;;AAEA,IAAIC,QAAQD,QAAQ,OAAR,CAAZ;AACA,IAAIE,kBAAkBF,QAAQ,mBAAR,CAAtB;AACA,IAAKG,UAAUH,QAAQ,SAAR,CAAf;AACA,IAAII,QAAQ,wBAAZ;AACA,IAAIC,QAAQ,IAAIH,eAAJ,CAAoBE,KAApB,CAAZ;;AAGA;AACA;AACA,IAAIE,WAAWN,QAAQ,UAAR,EAAoBO,KAApB,CAA0BD,QAAzC;;kBAEe,UAACE,GAAD,EAAMC,MAAN,EAAcC,QAAd,EAAwBC,IAAxB,EAA8BC,KAA9B,EAAwC;;AAEvDH,SAAOI,GAAP,CAAW,cAAX,EAA0B,UAACC,GAAD,EAAMC,GAAN,EAAa;;AAElC,QAAIC,UAAU;AACXC,WAAK,yoCADM;AAEXC,eAAS;AACP,sBAAc;AADP;AAFE,KAAd;;AAOC,aAASC,QAAT,CAAkBC,KAAlB,EAAyBC,QAAzB,EAAmCC,IAAnC,EAAyC;;AAEvC,UAAI,CAACF,KAAD,IAAUC,SAASE,UAAT,IAAuB,GAArC,EAA0C;AACxC,YAAIC,OAAOC,KAAKC,KAAL,CAAWJ,IAAX,CAAX;;AAEA,YAAIK,SAAU,4BAAaH,IAAb,CAAd;;AAEEG,eAAOC,IAAP,CAAY,UAASC,GAAT,EAAaC,MAAb,EAAoB;AAC1BC,kBAAQC,GAAR,CAAY,mBAAZ;AACAD,kBAAQC,GAAR,CAAY,QAAZ,EAAqBF,MAArB;AACAC,kBAAQC,GAAR,CAAY,OAAZ,EAAoBH,GAApB;AACH,SAJH;AAKDd,YAAIkB,UAAJ,CAAe,GAAf;AACF,OAXD,MAWK;AACF,YAAGb,KAAH,EAAS;AACPL,cAAIkB,UAAJ,CAAe,GAAf;AACD;AACH;AACF;;AAGD9B,YAAQa,OAAR,EAAiBG,QAAjB;AAGL,GAjCD;;AAmCAV,SAAOI,GAAP,CAAW,WAAX,EAAwB,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjC;AACC,4BAASmB,IAAT,CAAc,UAACL,GAAD,EAAMR,QAAN,EAAmB;;AAE/B,UAAGQ,GAAH,EACEd,IAAIoB,IAAJ,CAASN,GAAT,EADF,KAGEd,IAAIqB,IAAJ,CAASf,SAASA,SAASgB,MAAT,GAAkB,CAA3B,CAAT;AACH,KAND;AAOH,GATH;AAWC,C","file":"_authentication.router.js","sourcesContent":["\r\n// */app/routes/_authentication.router.js*\r\n\r\n// GET    */api/auth/user*        Get user data from session object in\r\n//                                Node\r\n\r\n// GET    */api/auth/loggedin*    Route to test if the user is logged in\r\n//                                or not\r\n\r\n// POST   */api/auth/login*       Route to login\r\n\r\n// POST   */api/auth/logout*      Route to logout and redirect to the\r\n//                                appropriate view\r\n\r\n// ## Authentication API object\r\n\r\n// Load user model\r\nimport User from '../models/user.model.js';\r\n\r\nimport linkedIn from '../models/Linkedin/linkedin.model.js';\r\n\r\nlet stringify = require(\"json-stringify-safe\");\r\n\r\nlet https = require(\"https\");\r\nlet HttpsProxyAgent = require('https-proxy-agent');  \r\nlet  request = require('request');  \r\nlet proxy = 'http://localhost:3030/';  \r\nlet agent = new HttpsProxyAgent(proxy); \r\n\r\n\r\n// Load the Mongoose ObjectId function to cast string as\r\n// ObjectId\r\nlet ObjectId = require('mongoose').Types.ObjectId;\r\n\r\nexport default (app, router, passport, auth, admin) => {\r\n\r\nrouter.get('/getlinkedIn',(req, res) =>{\r\n\r\n     var options = {\r\n        url: 'https://api.linkedin.com/v1/people/~:(id,num-connections,num-connections-capped,first-name,last-name,emailAddress,headline,picture-url,industry,summary,specialties,positions:(id,title,summary,start-date,end-date,is-current,company:(id,name,type,size,industry,ticker)),educations:(id,school-name,field-of-study,start-date,end-date,degree,activities,notes),associations,interests,num-recommenders,date-of-birth,publications:(id,title,publisher:(name),authors:(id,name),date,url,summary),patents:(id,title,summary,number,status:(id,name),office:(name),inventors:(id,name),date,url),languages:(id,language:(name),proficiency:(level,name)),skills:(id,skill:(name)),certifications:(id,name,authority:(name),number,start-date,end-date),courses:(id,name,number),recommendations-received:(id,recommendation-type,recommendation-text,recommender:(picture-url,headline,firstName,lastName)),honors-awards,three-current-positions,three-past-positions,volunteer)?oauth2_access_token=AQWN072mbxlACRWqGg8WcFSDZ8gfD6AxUH23xUH_LvqO1Rd_5IHdyhZjd9VfwverixXQbphIw_XDqNYXblHEpqm90uoiYma5yx4Rx0grAKYUIKEMRRgkPaaQtFDOrK_37R84wwUxQjKWkGAERg8nzGgXDQocgASOqWYoZTxzS0ANm9Bi0vk&format=json',\r\n        headers: {\r\n          'User-Agent': 'request'\r\n        }\r\n      };\r\n      \r\n      function callback(error, response, body) {\r\n        \r\n        if (!error && response.statusCode == 200) {\r\n          let info = JSON.parse(body);\r\n          \r\n          let linked =  new linkedIn(info);\r\n           \r\n            linked.save(function(err,result){\r\n                  console.log('saves sucessfully');\r\n                  console.log(\"result\",result);\r\n                  console.log(\"error\",err);\r\n              });\r\n           res.sendStatus(200);\r\n        }else{\r\n           if(error){\r\n             res.sendStatus(500);\r\n           }\r\n        }\r\n      }\r\n      \r\n      \r\n      request(options, callback);\r\n     \r\n\r\n})\r\n\r\nrouter.get('/linkedin', (req, res) => {\r\n     // Use mongoose to get all blog items in the database\r\n      linkedIn.find((err, response) => {\r\n       \r\n        if(err)\r\n          res.send(err);\r\n        else\r\n          res.json(response[response.length - 1]);\r\n      });\r\n  });\r\n\r\n};\r\n"]}