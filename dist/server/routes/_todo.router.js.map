{"version":3,"sources":["../../../app/routes/_todo.router.js"],"names":["app","router","route","post","req","res","Todo","create","text","body","err","todo","send","console","log","find","todos","json","get","findOne","params","todo_id","put","save","delete","remove","_id"],"mappings":";;;;;;AAeA;;;;;;kBAEe,UAACA,GAAD,EAAMC,MAAN,EAAiB;;AAE9B;;AAEA;;AAEAA,SAAOC,KAAP,CAAa,OAAb;;AAEE;;AAEA;;AAEA;AANF,GAOGC,IAPH,CAOQ,UAACC,GAAD,EAAMC,GAAN,EAAc;;AAElBC,mBAAKC,MAAL,CAAY;;AAEVC,YAAOJ,IAAIK,IAAJ,CAASD;;AAFN,KAAZ,EAIG,UAACE,GAAD,EAAMC,IAAN,EAAe;;AAEhB,UAAID,GAAJ,EACEL,IAAIO,IAAJ,CAASF,GAAT;;AAEF;AACAG,cAAQC,GAAR,oBAA6BH,IAA7B;;AAEAL,qBAAKS,IAAL,CAAU,UAACL,GAAD,EAAMM,KAAN,EAAgB;AACxB,YAAGN,GAAH,EACEL,IAAIO,IAAJ,CAASF,GAAT;;AAEFL,YAAIY,IAAJ,CAASD,KAAT;AACD,OALD;AAMD,KAlBD;AAmBD,GA5BH;;AA8BE;;AAEA;AAhCF,GAiCGE,GAjCH,CAiCO,UAACd,GAAD,EAAMC,GAAN,EAAc;;AAEjB;AACAC,mBAAKS,IAAL,CAAU,UAACL,GAAD,EAAMC,IAAN,EAAe;;AAEvB,UAAGD,GAAH,EACEL,IAAIO,IAAJ,CAASF,GAAT,EADF,KAIEL,IAAIY,IAAJ,CAASN,IAAT;AACH,KAPD;AAQD,GA5CH;;AA8CAV,SAAOC,KAAP,CAAa,gBAAb;;AAEE;;AAEA;AAJF,GAKGgB,GALH,CAKO,UAACd,GAAD,EAAMC,GAAN,EAAc;;AAEjB;AACAC,mBAAKa,OAAL,CAAaf,IAAIgB,MAAJ,CAAWC,OAAxB,EAAiC,UAACX,GAAD,EAAMC,IAAN,EAAe;;AAE9C,UAAGD,GAAH,EACEL,IAAIO,IAAJ,CAASF,GAAT,EADF,KAIEL,IAAIY,IAAJ,CAASN,IAAT;AACH,KAPD;AAQD,GAhBH;;AAkBE;;AAEA;AApBF,GAqBGW,GArBH,CAqBO,UAAClB,GAAD,EAAMC,GAAN,EAAc;;AAEjB;AACAC,mBAAKa,OAAL,CAAa;;AAEX,aAAQf,IAAIgB,MAAJ,CAAWC;;AAFR,KAAb,EAIG,UAACX,GAAD,EAAMC,IAAN,EAAe;;AAEhB,UAAID,GAAJ,EACEL,IAAIO,IAAJ,CAASF,GAAT;;AAEF;AACA,UAAIN,IAAIK,IAAJ,CAASD,IAAb,EACEG,KAAKH,IAAL,GAAYJ,IAAIK,IAAJ,CAASD,IAArB;;AAEF;AACA,aAAOG,KAAKY,IAAL,CAAU,UAACb,GAAD,EAAS;;AAExB,YAAIA,GAAJ,EACEL,IAAIO,IAAJ,CAASF,GAAT;;AAEF,eAAOL,IAAIO,IAAJ,CAASD,IAAT,CAAP;AAED,OAPM,CAAP;AAQD,KAtBD;AAuBD,GA/CH;;AAiDE;;AAEA;AAnDF,GAoDGa,MApDH,CAoDU,UAACpB,GAAD,EAAMC,GAAN,EAAc;;AAEpB;AACAQ,YAAQC,GAAR,yCAAkDV,IAAIgB,MAAJ,CAAWC,OAA7D;;AAEAf,mBAAKmB,MAAL,CAAY;;AAEVC,WAAMtB,IAAIgB,MAAJ,CAAWC;AAFP,KAAZ,EAGG,UAACX,GAAD,EAAMC,IAAN,EAAe;;AAEhB,UAAGD,GAAH,EACEL,IAAIO,IAAJ,CAASF,GAAT;;AAEFG,cAAQC,GAAR,CAAY,4BAAZ;;AAEAR,qBAAKS,IAAL,CAAU,UAACL,GAAD,EAAMM,KAAN,EAAgB;AACxB,YAAGN,GAAH,EACEL,IAAIO,IAAJ,CAASF,GAAT;;AAEFL,YAAIY,IAAJ,CAASD,KAAT;AACD,OALD;AAMD,KAhBD;AAiBD,GA1EH;AA2ED,C;;AA9ID;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA","file":"_todo.router.js","sourcesContent":["\n\n// */app/routes/_todo.router.js*\n\n// ## Todo API object\n\n// HTTP Verb  Route                 Description\n\n// GET        /api/todo             Get all of the todo items\n// GET        /api/todo/:todo_id    Get a single todo item by todo item id\n// POST       /api/todo             Create a single todo item\n// DELETE     /api/todo/:todo_id    Delete a single todo item\n// PUT        /api/todo/:todo_id    Update a todo item with new info\n\n// Load the todo model\nimport Todo from '../models/todo.model';\n\nexport default (app, router) => {\n\n  // ### Todo API Routes\n\n  // Define routes for the todo item API\n\n  router.route('/todo')\n\n    // ### Create a todo item\n\n    // Accessed at POST http://localhost:8080/api/todo\n\n    // Create a todo item\n    .post((req, res) => {\n\n      Todo.create({\n\n        text : req.body.text\n\n      }, (err, todo) => {\n\n        if (err)\n          res.send(err);\n\n        // DEBUG\n        console.log(`Todo created: ${todo}`);\n\n        Todo.find((err, todos) => {\n          if(err)\n            res.send(err);\n\n          res.json(todos);\n        });\n      });\n    })\n\n    // ### Get all of the todo items\n\n    // Accessed at GET http://localhost:8080/api/todo\n    .get((req, res) => {\n\n      // Use mongoose to get all todo items in the database\n      Todo.find((err, todo) => {\n\n        if(err)\n          res.send(err);\n\n        else\n          res.json(todo);\n      });\n    });\n\n  router.route('/todo/:todo_id')\n\n    // ### Get a todo item by ID\n\n    // Accessed at GET http://localhost:8080/api/todo/:todo_id\n    .get((req, res) => {\n\n      // Use mongoose to a single todo item by id in the database\n      Todo.findOne(req.params.todo_id, (err, todo) => {\n\n        if(err)\n          res.send(err);\n\n        else\n          res.json(todo);\n      });\n    })\n\n    // ### Update a todo item by ID\n\n    // Accessed at PUT http://localhost:8080/api/todo/:todo_id\n    .put((req, res) => {\n\n      // use our todo model to find the todo item we want\n      Todo.findOne({\n\n        '_id' : req.params.todo_id\n\n      }, (err, todo) => {\n\n        if (err)\n          res.send(err);\n\n        // Only update a field if a new value has been passed in\n        if (req.body.text)\n          todo.text = req.body.text;\n\n        // save the todo item\n        return todo.save((err) => {\n\n          if (err)\n            res.send(err);\n\n          return res.send(todo);\n\n        });\n      });\n    })\n\n    // ### Delete a todo item by ID\n\n    // Accessed at DELETE http://localhost:8080/api/todo/:todo_id\n    .delete((req, res) => {\n\n      // DEBUG\n      console.log(`Attempting to delete todo with id: ${req.params.todo_id}`);\n\n      Todo.remove({\n\n        _id : req.params.todo_id\n      }, (err, todo) => {\n\n        if(err)\n          res.send(err);\n\n        console.log('Todo successfully deleted!');\n\n        Todo.find((err, todos) => {\n          if(err)\n            res.send(err);\n\n          res.json(todos);\n        });\n      });\n    });\n};\n"]}