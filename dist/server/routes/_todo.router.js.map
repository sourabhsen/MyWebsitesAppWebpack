{"version":3,"sources":["../../../app/routes/_todo.router.js"],"names":["app","router","route","post","req","res","create","text","body","err","todo","send","console","log","find","todos","json","get","findOne","params","todo_id","put","save","delete","remove","_id"],"mappings":";;;;;;AAeA;;;;;;kBAEe,UAACA,GAAD,EAAMC,MAAN,EAAiB;;AAE9B;;AAEA;;AAEAA,SAAOC,KAAP,CAAa,OAAb;;AAEE;;AAEA;;AAEA;AANF,GAOGC,IAPH,CAOQ,UAACC,GAAD,EAAMC,GAAN,EAAc;;AAElB,mBAAKC,MAAL,CAAY;;AAEVC,YAAOH,IAAII,IAAJ,CAASD;;AAFN,KAAZ,EAIG,UAACE,GAAD,EAAMC,IAAN,EAAe;;AAEhB,UAAID,GAAJ,EACEJ,IAAIM,IAAJ,CAASF,GAAT;;AAEF;AACAG,cAAQC,GAAR,oBAA6BH,IAA7B;;AAEA,qBAAKI,IAAL,CAAU,UAACL,GAAD,EAAMM,KAAN,EAAgB;AACxB,YAAGN,GAAH,EACEJ,IAAIM,IAAJ,CAASF,GAAT;;AAEFJ,YAAIW,IAAJ,CAASD,KAAT;AACD,OALD;AAMD,KAlBD;AAmBD,GA5BH;;AA8BE;;AAEA;AAhCF,GAiCGE,GAjCH,CAiCO,UAACb,GAAD,EAAMC,GAAN,EAAc;;AAEjB;AACA,mBAAKS,IAAL,CAAU,UAACL,GAAD,EAAMC,IAAN,EAAe;;AAEvB,UAAGD,GAAH,EACEJ,IAAIM,IAAJ,CAASF,GAAT,EADF,KAIEJ,IAAIW,IAAJ,CAASN,IAAT;AACH,KAPD;AAQD,GA5CH;;AA8CAT,SAAOC,KAAP,CAAa,gBAAb;;AAEE;;AAEA;AAJF,GAKGe,GALH,CAKO,UAACb,GAAD,EAAMC,GAAN,EAAc;;AAEjB;AACA,mBAAKa,OAAL,CAAad,IAAIe,MAAJ,CAAWC,OAAxB,EAAiC,UAACX,GAAD,EAAMC,IAAN,EAAe;;AAE9C,UAAGD,GAAH,EACEJ,IAAIM,IAAJ,CAASF,GAAT,EADF,KAIEJ,IAAIW,IAAJ,CAASN,IAAT;AACH,KAPD;AAQD,GAhBH;;AAkBE;;AAEA;AApBF,GAqBGW,GArBH,CAqBO,UAACjB,GAAD,EAAMC,GAAN,EAAc;;AAEjB;AACA,mBAAKa,OAAL,CAAa;;AAEX,aAAQd,IAAIe,MAAJ,CAAWC;;AAFR,KAAb,EAIG,UAACX,GAAD,EAAMC,IAAN,EAAe;;AAEhB,UAAID,GAAJ,EACEJ,IAAIM,IAAJ,CAASF,GAAT;;AAEF;AACA,UAAIL,IAAII,IAAJ,CAASD,IAAb,EACEG,KAAKH,IAAL,GAAYH,IAAII,IAAJ,CAASD,IAArB;;AAEF;AACA,aAAOG,KAAKY,IAAL,CAAU,UAACb,GAAD,EAAS;;AAExB,YAAIA,GAAJ,EACEJ,IAAIM,IAAJ,CAASF,GAAT;;AAEF,eAAOJ,IAAIM,IAAJ,CAASD,IAAT,CAAP;AAED,OAPM,CAAP;AAQD,KAtBD;AAuBD,GA/CH;;AAiDE;;AAEA;AAnDF,GAoDGa,MApDH,CAoDU,UAACnB,GAAD,EAAMC,GAAN,EAAc;;AAEpB;AACAO,YAAQC,GAAR,yCAAkDT,IAAIe,MAAJ,CAAWC,OAA7D;;AAEA,mBAAKI,MAAL,CAAY;;AAEVC,WAAMrB,IAAIe,MAAJ,CAAWC;AAFP,KAAZ,EAGG,UAACX,GAAD,EAAMC,IAAN,EAAe;;AAEhB,UAAGD,GAAH,EACEJ,IAAIM,IAAJ,CAASF,GAAT;;AAEFG,cAAQC,GAAR,CAAY,4BAAZ;;AAEA,qBAAKC,IAAL,CAAU,UAACL,GAAD,EAAMM,KAAN,EAAgB;AACxB,YAAGN,GAAH,EACEJ,IAAIM,IAAJ,CAASF,GAAT;;AAEFJ,YAAIW,IAAJ,CAASD,KAAT;AACD,OALD;AAMD,KAhBD;AAiBD,GA1EH;AA2ED,C;;AA9ID;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA","file":"_todo.router.js","sourcesContent":["\r\n\r\n// */app/routes/_todo.router.js*\r\n\r\n// ## Todo API object\r\n\r\n// HTTP Verb  Route                 Description\r\n\r\n// GET        /api/todo             Get all of the todo items\r\n// GET        /api/todo/:todo_id    Get a single todo item by todo item id\r\n// POST       /api/todo             Create a single todo item\r\n// DELETE     /api/todo/:todo_id    Delete a single todo item\r\n// PUT        /api/todo/:todo_id    Update a todo item with new info\r\n\r\n// Load the todo model\r\nimport Todo from '../models/todo.model';\r\n\r\nexport default (app, router) => {\r\n\r\n  // ### Todo API Routes\r\n\r\n  // Define routes for the todo item API\r\n\r\n  router.route('/todo')\r\n\r\n    // ### Create a todo item\r\n\r\n    // Accessed at POST http://localhost:8080/api/todo\r\n\r\n    // Create a todo item\r\n    .post((req, res) => {\r\n\r\n      Todo.create({\r\n\r\n        text : req.body.text\r\n\r\n      }, (err, todo) => {\r\n\r\n        if (err)\r\n          res.send(err);\r\n\r\n        // DEBUG\r\n        console.log(`Todo created: ${todo}`);\r\n\r\n        Todo.find((err, todos) => {\r\n          if(err)\r\n            res.send(err);\r\n\r\n          res.json(todos);\r\n        });\r\n      });\r\n    })\r\n\r\n    // ### Get all of the todo items\r\n\r\n    // Accessed at GET http://localhost:8080/api/todo\r\n    .get((req, res) => {\r\n\r\n      // Use mongoose to get all todo items in the database\r\n      Todo.find((err, todo) => {\r\n\r\n        if(err)\r\n          res.send(err);\r\n\r\n        else\r\n          res.json(todo);\r\n      });\r\n    });\r\n\r\n  router.route('/todo/:todo_id')\r\n\r\n    // ### Get a todo item by ID\r\n\r\n    // Accessed at GET http://localhost:8080/api/todo/:todo_id\r\n    .get((req, res) => {\r\n\r\n      // Use mongoose to a single todo item by id in the database\r\n      Todo.findOne(req.params.todo_id, (err, todo) => {\r\n\r\n        if(err)\r\n          res.send(err);\r\n\r\n        else\r\n          res.json(todo);\r\n      });\r\n    })\r\n\r\n    // ### Update a todo item by ID\r\n\r\n    // Accessed at PUT http://localhost:8080/api/todo/:todo_id\r\n    .put((req, res) => {\r\n\r\n      // use our todo model to find the todo item we want\r\n      Todo.findOne({\r\n\r\n        '_id' : req.params.todo_id\r\n\r\n      }, (err, todo) => {\r\n\r\n        if (err)\r\n          res.send(err);\r\n\r\n        // Only update a field if a new value has been passed in\r\n        if (req.body.text)\r\n          todo.text = req.body.text;\r\n\r\n        // save the todo item\r\n        return todo.save((err) => {\r\n\r\n          if (err)\r\n            res.send(err);\r\n\r\n          return res.send(todo);\r\n\r\n        });\r\n      });\r\n    })\r\n\r\n    // ### Delete a todo item by ID\r\n\r\n    // Accessed at DELETE http://localhost:8080/api/todo/:todo_id\r\n    .delete((req, res) => {\r\n\r\n      // DEBUG\r\n      console.log(`Attempting to delete todo with id: ${req.params.todo_id}`);\r\n\r\n      Todo.remove({\r\n\r\n        _id : req.params.todo_id\r\n      }, (err, todo) => {\r\n\r\n        if(err)\r\n          res.send(err);\r\n\r\n        console.log('Todo successfully deleted!');\r\n\r\n        Todo.find((err, todos) => {\r\n          if(err)\r\n            res.send(err);\r\n\r\n          res.json(todos);\r\n        });\r\n      });\r\n    });\r\n};\r\n"]}